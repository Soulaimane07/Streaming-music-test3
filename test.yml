version: '3.8'

services:
  # MySQL for User Service
  mysql:
    image: mysql:8
    container_name: DB-User
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: userDb
      MYSQL_USER: myuser
      MYSQL_PASSWORD: mypassword
    volumes:
      - mysql-db:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - spotify

  # User Service
  # user-service:
  #   build:
  #     context: .
  #     dockerfile: docker/backend/user/Dockerfile
  #   container_name: Service-User
  #   ports:
  #     - "8091:8080"
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Production
  #     - ConnectionStrings__DefaultConnection=Host=mysql;Port=3306;Database=spotify;Username=user;Password=userpassword
  #   depends_on:
  #     - mysql
  #   networks:
  #     - spotify

  # # MongoDB for Catalog Service
  # mongodb:
  #   image: mongo:6
  #   container_name: DB-Catalog
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: admin
  #     MONGO_INITDB_ROOT_PASSWORD: password
  #     MONGO_INITDB_DATABASE: catalogdb # Consistent with connection string
  #   volumes:
  #     - mongodata:/data/db
  #   ports:
  #     - "27017:27017"
  #   networks:
  #     - spotify

  # # Catalog Service
  # catalog-service:
  #   build:
  #     context: .
  #     dockerfile: docker/backend/catalog/Dockerfile
  #   container_name: Service-Catalog
  #   ports:
  #     - "8090:8080"
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Production
  #     - ConnectionStrings__DefaultConnection=Host=mongodb;Port=27017;Database=catalogdb;Username=admin;Password=password
  #   depends_on:
  #     - mongodb
  #   networks:
  #     - spotify

  # Frontend Service
  # frontend:
  #   build:
  #     context: .
  #     dockerfile: docker/frontend/Dockerfile
  #   container_name: Frontend
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - user-service
  #     - catalog-service
  #   networks:
  #     - spotify

networks:
  spotify:
    driver: bridge

volumes:
  mysql-db: